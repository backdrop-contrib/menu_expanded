<?php

/**
 * @file restore "expanded" checboxes on menu item lists
 *
 * This duplicates code from Backdrop core menu module.
 * @see: https://github.com/backdrop/backdrop/pull/3658
 */

/**
 * Implementation of hook_theme
 * add in custom theme function for menu overview form
 */
function menu_expanded_theme($existing, $type, $theme, $path) {
  return array(
    'menu_expanded_menu_overview_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 * Add expanded checkbox on menu section of node_form
 */
function menu_expanded_form_node_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['menu']['link']['expanded']['#type']) && $form['menu']['link']['expanded']['#type'] === "value") {
    $form['menu']['link']['expanded'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show as expanded'),
      '#default_value' => $form['menu']['link']['expanded']['#value'],
      '#description' => t('If selected and this menu link has children, the menu will always appear expanded.')
    );
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 * Add in expanded checkbox on menu_overview_form
 */
function menu_expanded_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  $menu_items = element_children($form);
  foreach($menu_items AS $mlid) {
    if(substr($mlid, 0, 4) == 'mlid') {
      $item = $form[$mlid]['#item'];
      $form[$mlid]['expanded'] = array(
        '#type' => 'checkbox',
        '#title' => t('Expand @title menu link', array('@title' => $item['title'])),
        '#title_display' => 'invisible',
        '#default_value' => $item['expanded'],
        '#weight' => 1,
      );
    }
  }
  // alter the theme and submit functions to handle our use case.
  $form['#theme'][0] = 'menu_expanded_menu_overview_form';
  $form['#submit'][0] = 'menu_expanded_menu_overview_form_submit';
}

/**
 * Submit handler for the menu overview form.
 *
 * This function takes great care in saving parent items first, then items
 * underneath them. Saving items in the incorrect order can break the menu tree.
 *
 * @see menu_overview_form()
 */
function menu_expanded_menu_overview_form_submit($form, &$form_state) {
  // When dealing with saving menu items, the order in which these items are
  // saved is critical. If a changed child item is saved before its parent,
  // the child item could be saved with an invalid path past its immediate
  // parent. To prevent this, save items in the form in the same order they
  // are sent by $_POST, ensuring parents are saved first, then their children.
  // See http://drupal.org/node/181126#comment-632270
  $order = array_flip(array_keys($form_state['input'])); // Get the $_POST order.
  $form = array_intersect_key(array_merge($order, $form), $form); // Update our original form with the new order.

  $updated_items = array();
  $fields = array('weight', 'expanded', 'plid');
  foreach (element_children($form) as $mlid) {
    if (isset($form[$mlid]['#item'])) {
      $element = $form[$mlid];
      // Update any fields that have changed in this menu item.
      foreach ($fields as $field) {
        if ($element[$field]['#value'] != $element[$field]['#default_value']) {
          $element['#item'][$field] = $element[$field]['#value'];
          $updated_items[$mlid] = $element['#item'];
        }
      }
      // Hidden is a special case, the value needs to be reversed.
      if ($element['hidden']['#value'] != $element['hidden']['#default_value']) {
        // Convert to integer rather than boolean due to PDO cast to string.
        $element['#item']['hidden'] = $element['hidden']['#value'] ? 0 : 1;
        $updated_items[$mlid] = $element['#item'];
      }
    }
  }

  // Save all our changed items to the database.
  foreach ($updated_items as $item) {
    $item['customized'] = 1;
    menu_link_save($item);
  }
  backdrop_set_message(t('Your configuration has been saved.'));
}

/**
 * Returns HTML for the menu overview form into a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_menu_expanded_menu_overview_form($variables) {
  $form = $variables['form'];

  $output = '';

  $form['langcode']['#field_suffix'] = backdrop_render($form['langcode_filter']);
  $output .= backdrop_render($form['langcode']);

  backdrop_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, MENU_MAX_DEPTH - 1);
  backdrop_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');

  $header = array();
  $header[] = t('Menu link');
  if (module_exists('language')) {
    $header[] = t('Language');
  }
  $header[] = array('data' => t('Expanded'), 'title' => t('Show menu item as expanded in Hierarchical Tree menu style'), 'class' => array('checkbox'));
  $header[] = array('data' => t('Enabled'), 'class' => array('checkbox'));
  $header[] = t('Weight');
  $header[] = t('Operations');

  $rows = array();
  foreach (element_children($form) as $mlid) {
    if (isset($form[$mlid]['hidden'])) {
      $element = &$form[$mlid];

      // Add special classes to be used for tabledrag.js.
      $element['plid']['#attributes']['class'] = array('menu-plid');
      $element['mlid']['#attributes']['class'] = array('menu-mlid');
      $element['weight']['#attributes']['class'] = array('menu-weight');

      // Change the parent field to a hidden. This allows any value but hides the field.
      $element['plid']['#type'] = 'hidden';

      $row = array();
      $row[] = theme('indentation', array('size' => $element['#item']['depth'] - 1)) . backdrop_render($element['title']);
      if (module_exists('language')) {
        $row[] = backdrop_render($element['langcode']);
      }
      $row[] = array('data' => backdrop_render($element['expanded']), 'title' => $element['expanded']['#title'],'class' => array('checkbox', 'menu-enabled'));
      $row[] = array('data' => backdrop_render($element['hidden']), 'class' => array('checkbox', 'menu-enabled'));
      $row[] = backdrop_render($element['weight']) . backdrop_render($element['plid']) . backdrop_render($element['mlid']);
      $row[] = backdrop_render($element['operations']);

      $row = array_merge(array('data' => $row), $element['#attributes']);
      $row['class'][] = 'draggable';
      $rows[] = $row;
    }
  }

  if (empty($rows)) {
    $rows[] = array(
      array(
        'data' => $form['#empty_text'],
        'colspan' => count($header),
      ),
    );
  }
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'menu-overview'),
  ));
  $output .= backdrop_render_children($form);
  return $output;
}
